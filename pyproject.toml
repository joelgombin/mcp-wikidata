[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-wikidata"
version = "0.1.0"
description = "Model Context Protocol server for Wikidata access"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "MCP Wikidata Team"}
]
keywords = ["mcp", "wikidata", "knowledge-graph", "sparql"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "mcp>=1.0.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-httpx>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "coverage>=7.0.0",
]

[project.scripts]
mcp-wikidata = "mcp_wikidata.server:main"

[project.urls]
Homepage = "https://github.com/your-org/mcp-wikidata"
Repository = "https://github.com/your-org/mcp-wikidata"
Issues = "https://github.com/your-org/mcp-wikidata/issues"

[tool.black]
line-length = 88
target-version = ['py38']

[tool.isort]
profile = "black"
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
addopts = "--verbose --tb=short"

[tool.coverage.run]
source = ["mcp_wikidata"]
omit = ["tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
